#include <ESP8266WiFi.h>
#include <NexaTransmitter.h>
#include <ArduinoOTA.h>

// Connect 443 Tx for Nexa to D1
// GND to GND and VCC to 3V3
//
// Connect red LED+ to D5
// Connect green LED+ to D2
// - goes to GND on the button

const char* ssid = "<WIFI SSID>"; // Your WLAN SSID
const char* password = "<WIFI PASS>"; // Your WLAN Password
const char* host = "<HUE IP>"; // IP of the HUE bridge
const char* api_key = "<HUE API KEY>";

const char* OTA_hostname = "<OTA HOSTNAME>"; // The hostname that you will find under network ports

int buttonPin = D3;
int ledGreen = D2;
int ledRed = D5;
NexaTransmitter remote(D1,<NEXA CODE>); // Create the nexa remote on WeMos D1 mini digital input number D1 with remote id

void turnOFF() {
  digitalWrite(ledRed, HIGH);
  for (int i=0; i <= 16; i++){ // Send the signal three times to be sure
  remote.setSwitch(false, i);
  delay(100);
  } // End for loop
  digitalWrite(ledRed, LOW);
}

void hueallOFF() {
  WiFiClient client;
  if (client.connect(host,80))
  {
    client.print("PUT /api/");
    client.print(api_key);
    client.print("/groups/0/action"); 
    client.println(" HTTP/1.1");
    client.print("Host: ");
    client.println(host);                        
    client.println("Connection: close");
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.println("Content-Length: 12\r\n");
    client.print("{\"on\":false}");  
  }
} // end void hueOFF


// Set a bulb to ON and give brightness (0-254) + color. The color is CT value from 153 (cold) to 500 (warm)
// Example: hueON(10,250,385); Will turn on bulb 10 to a pretty warm white color
void hueON(int lamp, int brightness, int color) {
  WiFiClient client;
  delay(10);
  if (client.connect(host,80))
  {
    client.print("PUT /api/");
    client.print(api_key);
    client.print("/lights/");
    client.print(lamp);
    client.println("/state HTTP/1.1");
    client.print("Host:");
    client.println(host);
    client.println("Connection: close");
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.println("Content-Length: 32\r\n");
    client.print("{\"on\":true,");
    client.print("\"bri\":");
    client.print(brightness);
    client.print(",\"ct\":");
    client.print(color);
    client.print("}"); 
  }
}


void setup() {

  pinMode(ledGreen, OUTPUT);
  pinMode(ledRed, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);
  
  Serial.begin(9600);

  delay(10);
  
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  } 
  
  Serial.println("");
  Serial.println("WiFi connected");  
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  //////////////////////////
  //  Code to set up OTA  //
  //////////////////////////
  
  Serial.println();
  Serial.println("Booting");
  WiFi.mode(WIFI_STA);

  // Port defaults to 8266
  // ArduinoOTA.setPort(8266);

  // Hostname defaults to esp8266-[ChipID]
  ArduinoOTA.setHostname(OTA_hostname);

  // No authentication by default
  // ArduinoOTA.setPassword(OTA_password);

  ArduinoOTA.onStart([]() {
    Serial.println("Start");
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("End");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\n", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR) Serial.println("End Failed");
  });
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  ///////////////////////////////
  //  END: Code to set up OTA  //
  ///////////////////////////////
  
} // End void setup

void loop() {

  ArduinoOTA.handle(); // Needs to be here for OTA

  // If button pressed
  if ((digitalRead(buttonPin)==0)){
    delay(20);

    // While button held
    while (digitalRead(buttonPin)==0) {
      digitalWrite(ledGreen, HIGH);
      delay(20);
    } // End while button held
    
    digitalWrite(ledGreen, LOW);
    turnOFF();
    delay(100);
    hueallOFF();
    delay(100);
  } // End if button pressed

} // End void loop
